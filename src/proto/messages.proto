syntax = "proto3"; 

option go_package = "./chain";


/*
- A user can add/delete records. 
	- A record being modified is the same as deleting it then adding a new one	
	- The hash of each record is what's actually stored on the chain
	- each of these requests must have a signed hash using the user's public key
- when an entity requests a record from another one, they publish a request message
	- recipient publishes a response message (affirmative or negative)
- A request can also be published that asks for all blocks after a certain hash. 
	- longest one is used (?)
*/

message Block {
	BlockRecord Record = 1; 
	bytes Hash = 2;
	bytes Signature = 3;
}

message BlockRecord {
	int64 Timestamp = 1; 
	string InitiatorPeerID = 2; 
	bytes PreviousBlockHash = 3; 
	oneof InnerRecord {
		PeerRecordUpdate UpdateRecords = 4; 
		AuthorizedPeerUpdate UpdatePeers = 5;

		Request RequestRecord = 6;
	} 
}


message Request {
	oneof RequestType {
		ChainHistory ChainHistoryRequest = 1; 
		RecordRequestSubmit OriginRecordRequest = 2; 
		RecordRequestAck RecordRequestResponse = 3; 
	}
}

message ChainHistory {
	bytes AfterHash = 1; 
}

message RecordRequestSubmit {
	string RecipientPeerID = 1;
	bytes RecordHash = 2; 
}

message RecordRequestAck {
	string RequesterPeerID = 1; 
	bytes RecordHash = 2; 
	bool RequestSuccess = 3; 
}

message PeerRecordUpdate {
	repeated string AddedRecordHashes = 1; 
	repeated string RemovedRecordHashes = 2;
}

message AuthorizedPeerUpdate {
	repeated string AddedPeerIDs = 1; 
	repeated string RemovedPeerIDs = 2; 
}

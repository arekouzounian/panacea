// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: messages.proto

package chain

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Block struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Record        *BlockRecord           `protobuf:"bytes,1,opt,name=Record,proto3" json:"Record,omitempty"`
	Hash          []byte                 `protobuf:"bytes,2,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Signature     []byte                 `protobuf:"bytes,3,opt,name=Signature,proto3" json:"Signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Block) Reset() {
	*x = Block{}
	mi := &file_messages_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{0}
}

func (x *Block) GetRecord() *BlockRecord {
	if x != nil {
		return x.Record
	}
	return nil
}

func (x *Block) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *Block) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type BlockRecord struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Timestamp         int64                  `protobuf:"varint,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	InitiatorPeerID   string                 `protobuf:"bytes,2,opt,name=InitiatorPeerID,proto3" json:"InitiatorPeerID,omitempty"`
	PreviousBlockHash []byte                 `protobuf:"bytes,3,opt,name=PreviousBlockHash,proto3" json:"PreviousBlockHash,omitempty"`
	// Types that are valid to be assigned to InnerRecord:
	//
	//	*BlockRecord_UpdateRecords
	//	*BlockRecord_UpdatePeers
	//	*BlockRecord_RequestRecord
	InnerRecord   isBlockRecord_InnerRecord `protobuf_oneof:"InnerRecord"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockRecord) Reset() {
	*x = BlockRecord{}
	mi := &file_messages_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockRecord) ProtoMessage() {}

func (x *BlockRecord) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockRecord.ProtoReflect.Descriptor instead.
func (*BlockRecord) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{1}
}

func (x *BlockRecord) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *BlockRecord) GetInitiatorPeerID() string {
	if x != nil {
		return x.InitiatorPeerID
	}
	return ""
}

func (x *BlockRecord) GetPreviousBlockHash() []byte {
	if x != nil {
		return x.PreviousBlockHash
	}
	return nil
}

func (x *BlockRecord) GetInnerRecord() isBlockRecord_InnerRecord {
	if x != nil {
		return x.InnerRecord
	}
	return nil
}

func (x *BlockRecord) GetUpdateRecords() *PeerRecordUpdate {
	if x != nil {
		if x, ok := x.InnerRecord.(*BlockRecord_UpdateRecords); ok {
			return x.UpdateRecords
		}
	}
	return nil
}

func (x *BlockRecord) GetUpdatePeers() *AuthorizedPeerUpdate {
	if x != nil {
		if x, ok := x.InnerRecord.(*BlockRecord_UpdatePeers); ok {
			return x.UpdatePeers
		}
	}
	return nil
}

func (x *BlockRecord) GetRequestRecord() *Request {
	if x != nil {
		if x, ok := x.InnerRecord.(*BlockRecord_RequestRecord); ok {
			return x.RequestRecord
		}
	}
	return nil
}

type isBlockRecord_InnerRecord interface {
	isBlockRecord_InnerRecord()
}

type BlockRecord_UpdateRecords struct {
	UpdateRecords *PeerRecordUpdate `protobuf:"bytes,4,opt,name=UpdateRecords,proto3,oneof"`
}

type BlockRecord_UpdatePeers struct {
	UpdatePeers *AuthorizedPeerUpdate `protobuf:"bytes,5,opt,name=UpdatePeers,proto3,oneof"`
}

type BlockRecord_RequestRecord struct {
	RequestRecord *Request `protobuf:"bytes,6,opt,name=RequestRecord,proto3,oneof"`
}

func (*BlockRecord_UpdateRecords) isBlockRecord_InnerRecord() {}

func (*BlockRecord_UpdatePeers) isBlockRecord_InnerRecord() {}

func (*BlockRecord_RequestRecord) isBlockRecord_InnerRecord() {}

type Request struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to RequestType:
	//
	//	*Request_ChainHistoryRequest
	//	*Request_OriginRecordRequest
	//	*Request_RecordRequestResponse
	RequestType   isRequest_RequestType `protobuf_oneof:"RequestType"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Request) Reset() {
	*x = Request{}
	mi := &file_messages_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{2}
}

func (x *Request) GetRequestType() isRequest_RequestType {
	if x != nil {
		return x.RequestType
	}
	return nil
}

func (x *Request) GetChainHistoryRequest() *ChainHistory {
	if x != nil {
		if x, ok := x.RequestType.(*Request_ChainHistoryRequest); ok {
			return x.ChainHistoryRequest
		}
	}
	return nil
}

func (x *Request) GetOriginRecordRequest() *RecordRequestSubmit {
	if x != nil {
		if x, ok := x.RequestType.(*Request_OriginRecordRequest); ok {
			return x.OriginRecordRequest
		}
	}
	return nil
}

func (x *Request) GetRecordRequestResponse() *RecordRequestAck {
	if x != nil {
		if x, ok := x.RequestType.(*Request_RecordRequestResponse); ok {
			return x.RecordRequestResponse
		}
	}
	return nil
}

type isRequest_RequestType interface {
	isRequest_RequestType()
}

type Request_ChainHistoryRequest struct {
	ChainHistoryRequest *ChainHistory `protobuf:"bytes,1,opt,name=ChainHistoryRequest,proto3,oneof"`
}

type Request_OriginRecordRequest struct {
	OriginRecordRequest *RecordRequestSubmit `protobuf:"bytes,2,opt,name=OriginRecordRequest,proto3,oneof"`
}

type Request_RecordRequestResponse struct {
	RecordRequestResponse *RecordRequestAck `protobuf:"bytes,3,opt,name=RecordRequestResponse,proto3,oneof"`
}

func (*Request_ChainHistoryRequest) isRequest_RequestType() {}

func (*Request_OriginRecordRequest) isRequest_RequestType() {}

func (*Request_RecordRequestResponse) isRequest_RequestType() {}

type ChainHistory struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AfterHash     []byte                 `protobuf:"bytes,1,opt,name=AfterHash,proto3" json:"AfterHash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChainHistory) Reset() {
	*x = ChainHistory{}
	mi := &file_messages_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChainHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainHistory) ProtoMessage() {}

func (x *ChainHistory) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainHistory.ProtoReflect.Descriptor instead.
func (*ChainHistory) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{3}
}

func (x *ChainHistory) GetAfterHash() []byte {
	if x != nil {
		return x.AfterHash
	}
	return nil
}

type RecordRequestSubmit struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	RecipientPeerID string                 `protobuf:"bytes,1,opt,name=RecipientPeerID,proto3" json:"RecipientPeerID,omitempty"`
	RecordHash      []byte                 `protobuf:"bytes,2,opt,name=RecordHash,proto3" json:"RecordHash,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *RecordRequestSubmit) Reset() {
	*x = RecordRequestSubmit{}
	mi := &file_messages_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordRequestSubmit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordRequestSubmit) ProtoMessage() {}

func (x *RecordRequestSubmit) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordRequestSubmit.ProtoReflect.Descriptor instead.
func (*RecordRequestSubmit) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{4}
}

func (x *RecordRequestSubmit) GetRecipientPeerID() string {
	if x != nil {
		return x.RecipientPeerID
	}
	return ""
}

func (x *RecordRequestSubmit) GetRecordHash() []byte {
	if x != nil {
		return x.RecordHash
	}
	return nil
}

type RecordRequestAck struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	RequesterPeerID string                 `protobuf:"bytes,1,opt,name=RequesterPeerID,proto3" json:"RequesterPeerID,omitempty"`
	RecordHash      []byte                 `protobuf:"bytes,2,opt,name=RecordHash,proto3" json:"RecordHash,omitempty"`
	RequestSuccess  bool                   `protobuf:"varint,3,opt,name=RequestSuccess,proto3" json:"RequestSuccess,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *RecordRequestAck) Reset() {
	*x = RecordRequestAck{}
	mi := &file_messages_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordRequestAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordRequestAck) ProtoMessage() {}

func (x *RecordRequestAck) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordRequestAck.ProtoReflect.Descriptor instead.
func (*RecordRequestAck) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{5}
}

func (x *RecordRequestAck) GetRequesterPeerID() string {
	if x != nil {
		return x.RequesterPeerID
	}
	return ""
}

func (x *RecordRequestAck) GetRecordHash() []byte {
	if x != nil {
		return x.RecordHash
	}
	return nil
}

func (x *RecordRequestAck) GetRequestSuccess() bool {
	if x != nil {
		return x.RequestSuccess
	}
	return false
}

type PeerRecordUpdate struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	AddedRecordHashes   []string               `protobuf:"bytes,1,rep,name=AddedRecordHashes,proto3" json:"AddedRecordHashes,omitempty"`
	RemovedRecordHashes []string               `protobuf:"bytes,2,rep,name=RemovedRecordHashes,proto3" json:"RemovedRecordHashes,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *PeerRecordUpdate) Reset() {
	*x = PeerRecordUpdate{}
	mi := &file_messages_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeerRecordUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerRecordUpdate) ProtoMessage() {}

func (x *PeerRecordUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerRecordUpdate.ProtoReflect.Descriptor instead.
func (*PeerRecordUpdate) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{6}
}

func (x *PeerRecordUpdate) GetAddedRecordHashes() []string {
	if x != nil {
		return x.AddedRecordHashes
	}
	return nil
}

func (x *PeerRecordUpdate) GetRemovedRecordHashes() []string {
	if x != nil {
		return x.RemovedRecordHashes
	}
	return nil
}

type AuthorizedPeerUpdate struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	AddedPeerIDs   []string               `protobuf:"bytes,1,rep,name=AddedPeerIDs,proto3" json:"AddedPeerIDs,omitempty"`
	RemovedPeerIDs []string               `protobuf:"bytes,2,rep,name=RemovedPeerIDs,proto3" json:"RemovedPeerIDs,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AuthorizedPeerUpdate) Reset() {
	*x = AuthorizedPeerUpdate{}
	mi := &file_messages_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthorizedPeerUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizedPeerUpdate) ProtoMessage() {}

func (x *AuthorizedPeerUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizedPeerUpdate.ProtoReflect.Descriptor instead.
func (*AuthorizedPeerUpdate) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{7}
}

func (x *AuthorizedPeerUpdate) GetAddedPeerIDs() []string {
	if x != nil {
		return x.AddedPeerIDs
	}
	return nil
}

func (x *AuthorizedPeerUpdate) GetRemovedPeerIDs() []string {
	if x != nil {
		return x.RemovedPeerIDs
	}
	return nil
}

var File_messages_proto protoreflect.FileDescriptor

const file_messages_proto_rawDesc = "" +
	"\n" +
	"\x0emessages.proto\"_\n" +
	"\x05Block\x12$\n" +
	"\x06Record\x18\x01 \x01(\v2\f.BlockRecordR\x06Record\x12\x12\n" +
	"\x04Hash\x18\x02 \x01(\fR\x04Hash\x12\x1c\n" +
	"\tSignature\x18\x03 \x01(\fR\tSignature\"\xba\x02\n" +
	"\vBlockRecord\x12\x1c\n" +
	"\tTimestamp\x18\x01 \x01(\x03R\tTimestamp\x12(\n" +
	"\x0fInitiatorPeerID\x18\x02 \x01(\tR\x0fInitiatorPeerID\x12,\n" +
	"\x11PreviousBlockHash\x18\x03 \x01(\fR\x11PreviousBlockHash\x129\n" +
	"\rUpdateRecords\x18\x04 \x01(\v2\x11.PeerRecordUpdateH\x00R\rUpdateRecords\x129\n" +
	"\vUpdatePeers\x18\x05 \x01(\v2\x15.AuthorizedPeerUpdateH\x00R\vUpdatePeers\x120\n" +
	"\rRequestRecord\x18\x06 \x01(\v2\b.RequestH\x00R\rRequestRecordB\r\n" +
	"\vInnerRecord\"\xf0\x01\n" +
	"\aRequest\x12A\n" +
	"\x13ChainHistoryRequest\x18\x01 \x01(\v2\r.ChainHistoryH\x00R\x13ChainHistoryRequest\x12H\n" +
	"\x13OriginRecordRequest\x18\x02 \x01(\v2\x14.RecordRequestSubmitH\x00R\x13OriginRecordRequest\x12I\n" +
	"\x15RecordRequestResponse\x18\x03 \x01(\v2\x11.RecordRequestAckH\x00R\x15RecordRequestResponseB\r\n" +
	"\vRequestType\",\n" +
	"\fChainHistory\x12\x1c\n" +
	"\tAfterHash\x18\x01 \x01(\fR\tAfterHash\"_\n" +
	"\x13RecordRequestSubmit\x12(\n" +
	"\x0fRecipientPeerID\x18\x01 \x01(\tR\x0fRecipientPeerID\x12\x1e\n" +
	"\n" +
	"RecordHash\x18\x02 \x01(\fR\n" +
	"RecordHash\"\x84\x01\n" +
	"\x10RecordRequestAck\x12(\n" +
	"\x0fRequesterPeerID\x18\x01 \x01(\tR\x0fRequesterPeerID\x12\x1e\n" +
	"\n" +
	"RecordHash\x18\x02 \x01(\fR\n" +
	"RecordHash\x12&\n" +
	"\x0eRequestSuccess\x18\x03 \x01(\bR\x0eRequestSuccess\"r\n" +
	"\x10PeerRecordUpdate\x12,\n" +
	"\x11AddedRecordHashes\x18\x01 \x03(\tR\x11AddedRecordHashes\x120\n" +
	"\x13RemovedRecordHashes\x18\x02 \x03(\tR\x13RemovedRecordHashes\"b\n" +
	"\x14AuthorizedPeerUpdate\x12\"\n" +
	"\fAddedPeerIDs\x18\x01 \x03(\tR\fAddedPeerIDs\x12&\n" +
	"\x0eRemovedPeerIDs\x18\x02 \x03(\tR\x0eRemovedPeerIDsB\tZ\a./chainb\x06proto3"

var (
	file_messages_proto_rawDescOnce sync.Once
	file_messages_proto_rawDescData []byte
)

func file_messages_proto_rawDescGZIP() []byte {
	file_messages_proto_rawDescOnce.Do(func() {
		file_messages_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_messages_proto_rawDesc), len(file_messages_proto_rawDesc)))
	})
	return file_messages_proto_rawDescData
}

var file_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_messages_proto_goTypes = []any{
	(*Block)(nil),                // 0: Block
	(*BlockRecord)(nil),          // 1: BlockRecord
	(*Request)(nil),              // 2: Request
	(*ChainHistory)(nil),         // 3: ChainHistory
	(*RecordRequestSubmit)(nil),  // 4: RecordRequestSubmit
	(*RecordRequestAck)(nil),     // 5: RecordRequestAck
	(*PeerRecordUpdate)(nil),     // 6: PeerRecordUpdate
	(*AuthorizedPeerUpdate)(nil), // 7: AuthorizedPeerUpdate
}
var file_messages_proto_depIdxs = []int32{
	1, // 0: Block.Record:type_name -> BlockRecord
	6, // 1: BlockRecord.UpdateRecords:type_name -> PeerRecordUpdate
	7, // 2: BlockRecord.UpdatePeers:type_name -> AuthorizedPeerUpdate
	2, // 3: BlockRecord.RequestRecord:type_name -> Request
	3, // 4: Request.ChainHistoryRequest:type_name -> ChainHistory
	4, // 5: Request.OriginRecordRequest:type_name -> RecordRequestSubmit
	5, // 6: Request.RecordRequestResponse:type_name -> RecordRequestAck
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_messages_proto_init() }
func file_messages_proto_init() {
	if File_messages_proto != nil {
		return
	}
	file_messages_proto_msgTypes[1].OneofWrappers = []any{
		(*BlockRecord_UpdateRecords)(nil),
		(*BlockRecord_UpdatePeers)(nil),
		(*BlockRecord_RequestRecord)(nil),
	}
	file_messages_proto_msgTypes[2].OneofWrappers = []any{
		(*Request_ChainHistoryRequest)(nil),
		(*Request_OriginRecordRequest)(nil),
		(*Request_RecordRequestResponse)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_messages_proto_rawDesc), len(file_messages_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_messages_proto_goTypes,
		DependencyIndexes: file_messages_proto_depIdxs,
		MessageInfos:      file_messages_proto_msgTypes,
	}.Build()
	File_messages_proto = out.File
	file_messages_proto_goTypes = nil
	file_messages_proto_depIdxs = nil
}
